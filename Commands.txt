Step 1: Initial Server Setup
Update Package Lists and Upgrade Existing Packages:
sudo apt update && sudo apt upgrade -y
This command updates the package lists to the latest version and upgrades any outdated packages, ensuring your server is up-to-date.

Set Up a Firewall Using UFW (Uncomplicated Firewall):
sudo ufw allow OpenSSH
sudo ufw enable
sudo ufw status

sudo ufw allow OpenSSH: Allows SSH connections (port 22) through the firewall. SSH access is essential for remote management, so this command ensures you don’t accidentally block yourself from the server.
sudo ufw enable: Activates the firewall, applying any defined rules, like allowing OpenSSH.
sudo ufw status: Shows the current firewall status, listing allowed services and their respective ports.

Create a Non-Root User:

sudo adduser username
sudo usermod -aG sudo username

sudo adduser username: Creates a new user (replace username with your choice) with non-root privileges.
sudo usermod -aG sudo username: Grants this new user sudo privileges, allowing them to perform administrative tasks.


Step 2: Installing Necessary Software

1. Install Nginx Web Server:
sudo apt install nginx -y
sudo systemctl start nginx
sudo systemctl enable nginx

Installs Nginx, starts the service, and enables it to start automatically on boot.
2.Install Python and Flask:

sudo apt install python3-pip python3-venv -y
mkdir ~/personal-cloud
cd ~/personal-cloud
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install Flask cryptography gunicorn

python3-pip python3-venv: Installs Python tools for managing packages and virtual environments.
mkdir ~/personal-cloud: Creates a directory for the project.
python3 -m venv venv & source venv/bin/activate: Sets up and activates a virtual environment for isolated package management.
pip install Flask cryptography gunicorn: Installs Flask for the web app, cryptography for secure data handling, and gunicorn for a robust production server.

3.Install OpenSSL and Certbot:
sudo apt install certbot python3-certbot-nginx -y

Installs Certbot and its Nginx plugin to simplify SSL certificate management with Let’s Encrypt.

Step 3: Setting Up File Storage
1.Create Directory Structure

sudo mkdir -p /var/www/personal-cloud/storage
sudo chown -R www-data:www-data /var/www/personal-cloud
sudo chmod -R 750 /var/www/personal-cloud/storage

Creates a storage directory for encrypted files and sets ownership and permissions so only the Nginx user (www-data) has access. This enhances security by restricting unauthorized access.

Step 4: Developing the Back-End with Flask
1.Create Flask Application:

cd ~/personal-cloud
nano app.py

Opens a text editor to create and edit the Flask app file app.py. The coode file is already provided as flsk.py

2.Install Dependencies:

pip install Flask cryptography gunicorn

Installs Flask, cryptography, and Gunicorn (as explained in Step 2) for handling web requests, secure data, and serving the application.

3.Test the Flask Application:
python app.py

Testing with curl:
curl -u admin:password -F "file=@/path/to/your/file.txt" http://localhost:5000/upload
curl -u admin:password http://localhost:5000/download/file.txt -o downloaded_file.txt

These commands test file upload and download endpoints of the Flask app, simulating interactions with the cloud storage.

Step 5: Implementing Encryption
1.Understanding Encryption:

Fernet encryption (from cryptography library) is used, which provides AES-128 encryption, adding a layer of data protection and ensuring only authorized access.

2.Managing Encryption Keys:

sudo chown www-data:www-data /var/www/personal-cloud/secret.key
sudo chmod 600 /var/www/personal-cloud/secret.key

Stores the encryption key securely and limits file access to the www-data user, reducing the risk of unauthorized access.

3. To Generate a Secret Key:

cd ~/personal-cloud

Python3


from cryptography.fernet import Fernet
key = Fernet.generate_key()
with open("secret.key", "wb") as key_file:
    key_file.write(key)
exit()


It will show 44 which menas 44 byts and the key is generated

sudo mkdir -p /var/www/personal-cloud/

sudo mv secret.key /var/www/personal-cloud/

AND MOVE TO BEFORE STEP IF THIS COMPLETE


Step 6: Creating the Front-End Web Interface
1.Setting Up Static Files:

mkdir ~/personal-cloud/static
mkdir ~/personal-cloud/templates

Creates directories for storing static files (CSS, JavaScript) and HTML templates.

2.Create HTML Upload Form:
nano ~/personal-cloud/templates/index.html

3. Test The front-End: 
Run the Flask app and open http://localhost:5000 in a browser to see the interface.

Step 7: Securing the Application
1.Implement HTTPS with Certbot:
sudo certbot --nginx -d your-domain.com -d www.your-domain.com

Certbot automatically configures SSL certificates with Nginx for HTTPS encryption, ensuring secure communication.

2.Configure Nginx as a Reverse Proxy:
sudo nano /etc/nginx/sites-available/personal-cloud

Configure Nginx to route requests to the Flask app. Here’s an example configuration:
server {
    listen 80;
    server_name your-domain.com www.your-domain.com;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

This configures Nginx as a reverse proxy, forwarding requests to the Flask app running on port 8000.

3.Enable Configuration and Restart Nginx
sudo ln -s /etc/nginx/sites-available/personal-cloud /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl restart nginx

Links the configuration file, tests for errors, and restarts Nginx to apply changes.


ADDITIONAL COMMANDS IN CASE TO RESOLVE ANY ERRORS:-

ALL THE NETWORK COMMANDS USED 
sudo deluser username
sudo netstat -tuln | grep :5000
sudo lsof -i :5000
sudo kill <PID>
python3 app.py


step by step sol to remove user 
sudo cat /etc/passwd | grep cloudman
sudo deluser cloudman
sudo rm -r /home/cloudman
ps -u cloudman
sudo kill -9 <PID>



Add cloudman to the sudo Group
Run the following command to add cloudman to the sudo group:
sudo usermod -aG sudo cloudman

Force Kill Processes
If the processes still persist, use the kill -9 option to force terminate them:

sudo kill -9 $(sudo lsof -t -i:5000)

Check for Parent Processes
Sometimes, child processes are restarted by their parent. Check the parent process ID (PPID) of the running processes:

ps -o pid,ppid,cmd -p <PID>























































